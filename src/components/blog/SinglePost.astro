---
import MultiPlayer from '~/components/multiplayer/MultiPlayer.astro';
import { Icon } from 'astro-icon/components';
import { icStringToTextLines, type TranscriptTextLine } from "@incharge/transcript-core"
// See https://docs.astro.build/en/guides/imports/#node-builtins
import fs from 'node:fs/promises';

// import Image from '~/components/common/Image.astro';
// import PostTags from '~/components/blog/Tags.astro';
import SocialShare from '~/components/common/SocialShare.astro';

//import { getPermalink } from '~/utils/permalinks';
import { getFormattedDate } from '~/utils/utils';

import type { Post } from '~/types';

export interface Props {
  post: Post;
  url: string | URL;
}

const { post, url } = Astro.props;
const { Content } = post;
interface CustomDataFile {
  default: Record<string, any>;
}

// Get the transcript, if there is one for this episode
let lines: Array<TranscriptTextLine> | Error = [];

// No! Store the stringified transcript object in the .md file
// if (post.transcript) {
//   lines = JSON.parse(post.transcript);
// }

// No! Astro.glob only accepts literal parameters, not variables
// const transcripts = await Astro.glob<TranscriptSchema>('../../../public/transcript/924.ic.json');

// In build mode, the base url is dist/chunks/prerender_9abcdef0.mjs ,
// one level higher than src/components/blog/SinglePost.astro
const root = import.meta.url.includes('/dist/') ? '../..' : '../../..';
const linesUrl = new URL(root + '/public/transcript/' + post.transcript, import.meta.url);
let transcriptUrl: string = '';
try {
  if (async (linesUrl) => !!(await fs.stat(linesUrl).catch(e => false))) {
    // lines = icStringToTextLines(transcript);
    lines = JSON.parse(await fs.readFile(linesUrl, 'utf-8'));
    transcriptUrl = `${Astro.url.origin}${import.meta.env.BASE_URL}proofreader/?url=https://raw.githubusercontent.com/thedissenter/thedissenter/main/episode/${post.episodeid}/transcript.ic.json`;
  }
} catch (e)  {
  // Failed to read transcript file
}
---

<section class="mx-auto">
  <article>
    <header class={post.image ? '' : ''}>
      <div class="flex justify-between flex-col sm:flex-row max-w-3xl mx-auto mt-0 mb-2 px-4 sm:px-6 sm:items-center">
        <p class="text-gray-500 dark:text-slate-400">
          <Icon name="tabler:clock" class="w-4 h-4 inline-block -mt-0.5" />
          <time datetime={String(post.publishDate)} class="inline-block">{getFormattedDate(post.publishDate)}</time>
        </p>
        <SocialShare url={url} text={post.title} class="mt-5 sm:mt-1" />
{/*
          {
            post.category && (
              <>
                {' '}
                ·{' '}
                <a class="capitalize hover:underline inline-block" href={getPermalink(post.category, 'category')}>
                  {post.category.replaceAll('-', ' ')}
                </a>
              </>
            )
          }
 */}
{/*
         {post.readingTime && <> · {post.readingTime} min read</>}
*/}
      </div>
      <h1
        class="mb-2 px-4 sm:px-6 max-w-3xl mx-auto text-4xl md:text-5xl font-bold leading-tighter tracking-tighter font-heading"
      >
        {post.title}
      </h1>
{/*
     <p
        class="max-w-3xl mx-auto mt-4 mb-8 px-4 sm:px-6 text-xl md:text-2xl text-muted dark:text-slate-400 text-justify"
      >
        {post.excerpt}
      </p>

      {
        post.image ? (
          <Image
            src={post.image}
            class="max-w-full lg:max-w-[900px] mx-auto mb-6 sm:rounded-md bg-gray-400 dark:bg-slate-700"
            widths={[400, 900]}
            sizes="(max-width: 900px) 400px, 900px"
            alt={post?.excerpt || ''}
            width={900}
            height={506}
            loading="eager"
            decoding="async"
          />
        ) : (
          <div class="max-w-3xl mx-auto px-4 sm:px-6">
            <div class="border-t dark:border-slate-700" />
          </div>
        )
      }
*/}
    </header>
    <MultiPlayer class="mx-auto max-w-2xl aspect-youtube bg-gray-600" youtubeid={post.youtubeid} audiourl={post.audiourl} poster={post.image} vtt={post.vtt}/>
    <div
      class="mx-auto px-6 sm:px-6 max-w-3xl prose prose-lg lg:prose-xl dark:prose-invert dark:prose-headings:text-slate-300 prose-md prose-headings:font-heading prose-headings:leading-tighter prose-headings:tracking-tighter prose-headings:font-bold prose-a:text-primary dark:prose-a:text-blue-400 prose-img:rounded-md prose-img:shadow-lg mt-8 prose-headings:scroll-mt-[80px]"
      >
      {
      !(lines instanceof Error) && lines.length ? (
        <a id="top"></a><a href="#transcript">Jump to transcript</a>
        <h2>Show notes</h2>
        <div class="timelinks">
        {
          Content ? (
            <Content />
          ) : (
            <Fragment set:html={post.content || ""} />
          )
        }
        </div>
        <a href="#top">Back to top</a>
        <a id="transcript"></a>
        <h2>Transcript</h2>
        <div class="timelinks">
          <p class="text-muted text-sm bg-slate-200 rounded p-1 text-center\">Transcripts are automatically generated and may contain errors</p>
          {lines.map(line => (
            <div><time>{line.start_time}</time> {line.speaker}:  {line.words}</div>
          ))}
        <a href="#top">Back to top</a>
        <p><a href={transcriptUrl}>Proof read the transcript (experimental)</a></p>
        </div>
      ) :
      (
        <div class="timelinks">
        {
          Content ? (
            <Content />
          ) : (
            <Fragment set:html={post.content || ""} />
          )
        }
        </div>
      )
    }
    </div>
  </article>
</section>
