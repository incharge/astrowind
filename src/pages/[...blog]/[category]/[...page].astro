---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';
import { blogCategoryRobots, getStaticPathsBlogCategory } from '~/utils/blog';

import Layout from '~/layouts/PageLayout.astro';
import BlogList from '~/components/blog/List.astro';
import Headline from '~/components/blog/Headline.astro';
// import Pagination from '~/components/blog/Pagination.astro';
import PaginationPhilNash from "@philnash/astro-pagination"; {/* See node_modules/@philnash/astro-pagination */}
import { SITE, CATEGORIES } from '~/utils/config';
import { getPermalink } from '../../../utils/permalinks';
import Tags from '~/components/blog/Tags.astro';

export const prerender = true;

export const getStaticPaths = (async ({ paginate }) => {
  return await getStaticPathsBlogCategory({ paginate });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths> & { category: string };

const { page, category } = Astro.props as Props;

const currentPage = page.currentPage ?? 1;

const metadata = {
  title: `Episodes by category '${category}' ${currentPage > 1 ? ` â€” Page ${currentPage}` : ''}`,
  robots: {
    index: blogCategoryRobots?.index,
    follow: blogCategoryRobots?.follow,
  },
};
// TODO: Fix pagination so it automatically includes the base URL
// Meanwhile, Fix the base URL here
if (page.url.prev && !page.url.prev.startsWith('/' + SITE.base))
  page.url.prev = getPermalink(page.url.prev);
if (page.url.next && !page.url.next.startsWith('/' + SITE.base))
  page.url.next = getPermalink(page.url.next);

// Generic version of the above i.e. works with themes other than astrowind
// let base_trailing = import.meta.env.BASE_URL;
// let base_notrailing = base_trailing;
// if (base_trailing != '/') {
//   if (base_trailing.slice(-1) == '/')
//     base_notrailing = base_notrailing.slice(0,-1);
//   else
//     base_trailing += '/';
//   if (page.url.prev && !page.url.prev.startsWith(base_trailing))
//     page.url.prev = base_notrailing + page.url.prev;
//   if (page.url.next && !page.url.next.startsWith(base_trailing))
//     page.url.next = base_notrailing + page.url.next;
// }

// Show pagination if there's more than one page
const isPagination = page.lastPage > 1;
const categories = CATEGORIES;
---
<Layout metadata={metadata}>
  <section class="px-4 md:px-6 py-12 sm:py-16 lg:py-20 mx-auto max-w-4xl">
    <Tags tags={categories} isCategory={true}></Tags>
    <Headline><span class="capitalize">{category.replaceAll('-', ' ')}</span></Headline>
    { isPagination && (
      <div class="pagination"><PaginationPhilNash
        page={page}
        urlPattern={getPermalink(category + '/{}', 'category')} 
        firstPageUrl={getPermalink(category, 'category')}
      /></div>
    )}
    <BlogList posts={page.data} />
    { isPagination && (
    <div class="pagination"><PaginationPhilNash
      page={page}
      urlPattern={getPermalink(category + '/{}', 'category')} 
      firstPageUrl={getPermalink(category, 'category')}
    /></div>
    )}
    {/* firstPageUrl avoids trailing double slash */}
  </section>
</Layout>
